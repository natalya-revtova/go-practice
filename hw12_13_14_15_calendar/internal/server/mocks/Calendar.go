// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/natalya-revtova/go-practice/hw12_13_14_15_calendar/internal/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Calendar is an autogenerated mock type for the Calendar type
type Calendar struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: _a0, _a1
func (_m *Calendar) CreateEvent(_a0 context.Context, _a1 *models.Event) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Event) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: _a0, _a1
func (_m *Calendar) DeleteEvent(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEventByDay provides a mock function with given fields: _a0, _a1, _a2
func (_m *Calendar) GetEventByDay(_a0 context.Context, _a1 int64, _a2 time.Time) ([]models.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) ([]models.Event, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []models.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByMonth provides a mock function with given fields: _a0, _a1, _a2
func (_m *Calendar) GetEventByMonth(_a0 context.Context, _a1 int64, _a2 time.Time) ([]models.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) ([]models.Event, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []models.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByWeek provides a mock function with given fields: _a0, _a1, _a2
func (_m *Calendar) GetEventByWeek(_a0 context.Context, _a1 int64, _a2 time.Time) ([]models.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) ([]models.Event, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time) []models.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: _a0, _a1
func (_m *Calendar) UpdateEvent(_a0 context.Context, _a1 *models.Event) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Event) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCalendar creates a new instance of Calendar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCalendar(t interface {
	mock.TestingT
	Cleanup(func())
}) *Calendar {
	mock := &Calendar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
